import { type NextRequest, NextResponse } from "next/server"
import OpenAI from "openai"

// Initialize OpenAI client
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
})

// List of fashion keywords to identify fashion-related queries
const fashionKeywords = [
  "fashion",
  "clothes",
  "clothing",
  "outfit",
  "dress",
  "shirt",
  "pants",
  "shoes",
  "style",
  "wear",
  "wardrobe",
  "accessory",
  "accessories",
  "jacket",
  "jeans",
  "t-shirt",
  "sweater",
  "hoodie",
  "skirt",
  "blouse",
  "suit",
  "tie",
  "scarf",
  "hat",
  "cap",
  "socks",
  "underwear",
  "lingerie",
  "coat",
  "trousers",
  "shorts",
  "swimwear",
  "bikini",
  "trunks",
  "formal",
  "casual",
  "streetwear",
  "vintage",
  "retro",
  "modern",
  "trendy",
  "chic",
  "elegant",
  "sophisticated",
  "bohemian",
  "preppy",
  "sporty",
  "athletic",
  "business",
  "professional",
  "party",
  "evening",
  "wedding",
  "prom",
  "date",
  "interview",
  "work",
  "office",
  "school",
  "college",
  "university",
  "gym",
  "workout",
  "exercise",
  "sports",
  "running",
  "jogging",
  "yoga",
  "pilates",
  "hiking",
  "camping",
  "beach",
  "pool",
  "winter",
  "summer",
  "spring",
  "fall",
  "autumn",
  "seasonal",
  "holiday",
  "vacation",
  "travel",
  "color",
  "pattern",
  "design",
  "brand",
  "designer",
  "luxury",
  "affordable",
  "budget",
  "cheap",
  "expensive",
  "high-end",
  "low-end",
  "mid-range",
  "quality",
  "material",
  "fabric",
  "cotton",
  "wool",
  "silk",
  "leather",
  "denim",
  "polyester",
  "nylon",
  "spandex",
  "linen",
  "velvet",
  "suede",
  "cashmere",
  "tweed",
  "flannel",
  "corduroy",
  "chambray",
  "jersey",
  "knit",
  "woven",
  "print",
  "solid",
  "stripe",
  "plaid",
  "check",
  "polka dot",
  "floral",
  "graphic",
  "logo",
  "embroidery",
  "sequin",
  "beaded",
  "fringe",
  "tassel",
  "ruffle",
  "pleated",
  "quilted",
  "distressed",
  "ripped",
  "torn",
  "faded",
  "washed",
  "raw",
  "finished",
  "hemmed",
  "cuffed",
  "collared",
  "v-neck",
  "crew neck",
  "turtleneck",
  "mock neck",
  "off-shoulder",
  "strapless",
  "sleeveless",
  "short-sleeve",
  "long-sleeve",
  "button-up",
  "button-down",
  "zip-up",
  "pullover",
  "cardigan",
  "blazer",
  "vest",
  "tank top",
  "camisole",
  "bodysuit",
  "romper",
  "jumpsuit",
  "overalls",
  "dress pants",
  "khakis",
  "chinos",
  "cargo pants",
  "leggings",
  "jeggings",
  "sweatpants",
  "joggers",
  "track pants",
  "culottes",
  "palazzo pants",
  "capris",
  "bermuda shorts",
  "denim shorts",
  "board shorts",
  "mini skirt",
  "midi skirt",
  "maxi skirt",
  "pencil skirt",
  "a-line skirt",
  "pleated skirt",
  "wrap skirt",
  "slip dress",
  "shift dress",
  "sheath dress",
  "a-line dress",
  "wrap dress",
  "bodycon dress",
  "maxi dress",
  "midi dress",
  "mini dress",
  "cocktail dress",
  "gown",
  "sundress",
  "shirtdress",
  "sweater dress",
  "tunic",
  "kaftan",
  "kimono",
  "poncho",
  "cape",
  "shawl",
  "stole",
  "wrap",
  "bolero",
  "cropped",
  "oversized",
  "fitted",
  "slim-fit",
  "regular-fit",
  "relaxed-fit",
  "loose-fit",
  "baggy",
  "skinny",
  "straight-leg",
  "boot-cut",
  "flared",
  "wide-leg",
  "tapered",
  "high-waisted",
  "mid-rise",
  "low-rise",
  "drop-waist",
  "empire waist",
  "natural waist",
  "belted",
  "drawstring",
  "elastic",
  "adjustable",
  "stretch",
  "non-stretch",
  "structured",
  "unstructured",
  "lined",
  "unlined",
  "padded",
  "unpadded",
  "insulated",
  "waterproof",
  "water-resistant",
  "windproof",
  "breathable",
  "moisture-wicking",
  "quick-dry",
  "UV-protective",
  "anti-wrinkle",
  "wrinkle-resistant",
  "stain-resistant",
  "machine-washable",
  "dry-clean only",
  "hand-wash",
  "delicate",
  "durable",
  "sustainable",
  "eco-friendly",
  "organic",
  "recycled",
  "upcycled",
  "ethical",
  "fair-trade",
  "handmade",
  "artisanal",
  "custom",
  "bespoke",
  "tailored",
  "altered",
  "hemmed",
  "taken in",
  "let out",
  "resized",
  "refitted",
  "repaired",
  "mended",
  "patched",
  "darned",
  "embellished",
  "decorated",
  "adorned",
  "accessorized",
  "styled",
  "coordinated",
  "matched",
  "mixed",
  "layered",
  "stacked",
  "paired",
  "combined",
  "contrasted",
  "complemented",
]

// Non-fashion keywords to filter out non-fashion queries
const nonFashionKeywords = [
  "car",
  "bike",
  "truck",
  "phone",
  "laptop",
  "computer",
  "tablet",
  "dog",
  "cat",
  "animal",
  "food",
  "pizza",
  "burger",
  "pasta",
  "fruit",
  "vegetable",
  "plant",
  "tree",
  "house",
  "apartment",
  "building",
  "city",
  "river",
  "ocean",
  "mountain",
  "road",
  "bridge",
  "train",
  "airplane",
  "boat",
  "ship",
  "microwave",
  "fridge",
  "washing machine",
  "television",
  "radio",
  "printer",
  "keyboard",
  "mouse",
  "book",
  "pen",
  "notebook",
  "paper",
  "chair",
  "table",
  "sofa",
  "bed",
  "lamp",
  "clock",
  "watch",
  "painting",
  "art",
  "sculpture",
  "music",
  "guitar",
  "piano",
  "violin",
  "camera",
  "drone",
  "candle",
  "mirror",
  "glass",
  "bottle",
  "cup",
  "plate",
  "basket",
  "toy",
  "game",
  "football",
  "basketball",
  "tennis",
  "rugby",
  "volleyball",
  "badminton",
  "hockey",
  "cricket",
  "wrestling",
  "bitcoin",
  "cryptocurrency",
  "crypto",
  "blockchain",
  "ethereum",
  "finance",
  "money",
  "investment",
  "stock",
  "market",
  "economy",
  "banking",
  "technology",
  "software",
  "hardware",
  "internet",
  "website",
  "app",
  "application",
  "program",
  "code",
  "coding",
  "programming",
  "developer",
  "science",
  "math",
  "physics",
  "chemistry",
  "biology",
  "history",
  "geography",
  "politics",
  "government",
  "law",
  "medicine",
  "health",
  "disease",
  "virus",
  "bacteria",
  "vaccine",
  "treatment",
  "therapy",
  "doctor",
  "nurse",
  "hospital",
  "clinic",
  "pharmacy",
  "drug",
  "medication",
  "prescription",
  "surgery",
  "operation",
  "procedure",
  "diagnosis",
  "symptom",
  "condition",
  "disorder",
  "syndrome",
  "injury",
  "pain",
  "relief",
  "cure",
  "recovery",
  "rehabilitation",
  "therapy",
  "counseling",
  "psychology",
  "psychiatry",
  "mental",
  "emotional",
  "physical",
  "spiritual",
  "religion",
  "god",
  "deity",
  "worship",
  "prayer",
  "meditation",
  "mindfulness",
  "yoga",
  "philosophy",
  "ethics",
  "morality",
  "values",
  "principles",
  "beliefs",
  "faith",
  "hope",
  "love",
  "hate",
  "anger",
  "fear",
  "joy",
  "sadness",
  "happiness",
  "depression",
  "anxiety",
  "stress",
  "relaxation",
  "peace",
  "war",
  "conflict",
  "violence",
  "peace",
  "harmony",
  "balance",
  "unity",
  "diversity",
  "inclusion",
  "exclusion",
  "discrimination",
  "prejudice",
  "bias",
  "stereotype",
  "racism",
  "sexism",
  "homophobia",
  "transphobia",
  "xenophobia",
  "equality",
  "inequality",
  "justice",
  "injustice",
  "rights",
  "freedom",
  "liberty",
  "democracy",
  "dictatorship",
  "monarchy",
  "republic",
  "socialism",
  "communism",
  "capitalism",
  "economy",
  "inflation",
  "deflation",
  "recession",
  "depression",
  "growth",
  "development",
  "progress",
  "innovation",
  "invention",
  "discovery",
  "research",
  "experiment",
  "theory",
  "hypothesis",
  "thesis",
  "antithesis",
  "synthesis",
  "analysis",
  "evaluation",
  "assessment",
  "judgment",
  "opinion",
  "fact",
  "fiction",
  "truth",
  "lie",
  "deception",
  "honesty",
  "integrity",
  "character",
  "personality",
  "identity",
  "self",
  "other",
  "society",
  "community",
  "family",
  "friend",
  "enemy",
  "ally",
  "partner",
  "spouse",
  "husband",
  "wife",
  "parent",
  "child",
  "sibling",
  "relative",
  "ancestor",
  "descendant",
  "generation",
  "age",
  "youth",
  "adult",
  "senior",
  "elder",
  "birth",
  "life",
  "death",
  "afterlife",
  "heaven",
  "hell",
  "purgatory",
  "limbo",
  "reincarnation",
  "soul",
  "spirit",
  "mind",
  "body",
  "heart",
  "brain",
  "consciousness",
  "unconsciousness",
  "subconscious",
  "dream",
  "nightmare",
  "fantasy",
  "reality",
  "virtual",
  "augmented",
  "mixed",
  "artificial",
  "natural",
  "organic",
  "synthetic",
  "chemical",
  "biological",
  "physical",
  "digital",
  "analog",
  "mechanical",
  "electrical",
  "electronic",
  "optical",
  "acoustic",
  "thermal",
  "nuclear",
  "atomic",
  "molecular",
  "cellular",
  "genetic",
  "genomic",
  "proteomic",
  "metabolic",
  "physiological",
  "anatomical",
  "neurological",
  "psychological",
  "behavioral",
  "cognitive",
  "affective",
  "perceptual",
  "sensory",
  "motor",
  "kinesthetic",
  "proprioceptive",
  "interoceptive",
  "exteroceptive",
]

// Project information for queries about KAATCHI
const projectInfo = {
  name: "KAATCHI",
  meaning: "Vision in Tamil",
  description: "An AI-powered fashion search platform using vision-language models",
  developers: {
    main: "Selva",
    vlm: ["Angeline", "Prathish"],
  },
  features: [
    "Text-based fashion search",
    "Image-based fashion search",
    "Multimodal search (text + image)",
    "Fashion chatbot assistant",
    "Product recommendations",
  ],
  technologies: [
    "Next.js",
    "React",
    "TypeScript",
    "Python",
    "CLIP (Contrastive Language-Image Pre-training)",
    "OpenAI API",
    "Tailwind CSS",
  ],
}

// Keywords that might indicate a query about the KAATCHI project
const projectKeywords = [
  "kaatchi",
  "project",
  "app",
  "application",
  "website",
  "platform",
  "system",
  "software",
  "program",
  "tool",
  "utility",
  "service",
  "product",
  "solution",
  "technology",
  "tech",
  "development",
  "developed",
  "created",
  "built",
  "made",
  "designed",
  "implemented",
  "programmed",
  "coded",
  "engineered",
  "architected",
  "constructed",
  "fashioned",
  "fabricated",
  "produced",
  "generated",
  "who made",
  "who created",
  "who built",
  "who developed",
  "who designed",
  "who implemented",
  "who programmed",
  "who coded",
  "who engineered",
  "who architected",
  "who constructed",
  "who fashioned",
  "who fabricated",
  "who produced",
  "who generated",
  "tell me about",
  "what is",
  "how does",
  "how do",
  "how was",
  "when was",
  "where was",
  "why was",
  "explain",
  "describe",
  "elaborate",
  "clarify",
  "elucidate",
  "expound",
  "detail",
  "specify",
  "define",
  "delineate",
  "outline",
  "summarize",
  "recapitulate",
  "recapitulation",
  "synopsis",
  "overview",
  "summary",
  "abstract",
  "précis",
  "digest",
  "brief",
  "rundown",
  "lowdown",
  "scoop",
  "info",
  "information",
  "data",
  "facts",
  "details",
  "particulars",
  "specifics",
  "points",
  "items",
  "elements",
  "components",
  "constituents",
  "ingredients",
  "parts",
  "pieces",
  "segments",
  "sections",
  "divisions",
  "subdivisions",
  "portions",
  "chunks",
  "bits",
  "fragments",
  "shards",
  "splinters",
  "slivers",
  "snippets",
  "scraps",
  "remnants",
  "residue",
  "remainder",
  "balance",
  "rest",
  "leftover",
  "surplus",
  "excess",
  "extra",
  "spare",
  "additional",
  "supplementary",
  "complementary",
  "auxiliary",
  "ancillary",
  "subsidiary",
  "secondary",
  "supporting",
  "backup",
  "reserve",
  "standby",
  "alternate",
  "alternative",
  "substitute",
  "replacement",
  "surrogate",
  "proxy",
  "deputy",
  "representative",
  "delegate",
  "ambassador",
  "emissary",
  "envoy",
  "messenger",
  "courier",
  "carrier",
  "bearer",
  "conveyor",
  "transporter",
  "transmitter",
  "communicator",
  "relayer",
  "passer",
  "forwarder",
  "sender",
  "dispatcher",
  "shipper",
  "consignor",
  "exporter",
  "importer",
  "distributor",
  "wholesaler",
  "retailer",
  "vendor",
  "seller",
  "merchant",
  "trader",
  "dealer",
  "broker",
  "agent",
  "middleman",
  "intermediary",
  "go-between",
  "liaison",
  "contact",
  "connection",
  "link",
  "bridge",
  "channel",
  "conduit",
  "pipeline",
  "pathway",
  "route",
  "path",
  "course",
  "track",
  "trail",
  "way",
  "road",
  "street",
  "avenue",
  "boulevard",
  "lane",
  "drive",
  "place",
  "circle",
  "court",
  "terrace",
  "plaza",
  "square",
  "park",
  "garden",
  "yard",
  "lawn",
  "field",
  "meadow",
  "pasture",
  "prairie",
  "savanna",
  "steppe",
  "tundra",
  "desert",
  "oasis",
  "jungle",
  "forest",
  "woods",
  "grove",
  "thicket",
  "copse",
  "stand",
  "clump",
  "cluster",
  "bunch",
  "group",
  "collection",
  "set",
  "series",
  "sequence",
  "succession",
  "progression",
  "procession",
  "parade",
  "march",
  "train",
  "convoy",
  "caravan",
  "cavalcade",
  "cortege",
  "entourage",
  "retinue",
  "suite",
  "staff",
  "personnel",
  "workforce",
  "manpower",
  "labor",
  "workers",
  "employees",
  "staff members",
  "team members",
  "crew members",
  "cast members",
  "ensemble members",
  "troupe members",
  "band members",
  "orchestra members",
  "choir members",
  "chorus members",
  "ensemble",
  "troupe",
  "band",
  "orchestra",
  "choir",
  "chorus",
  "group",
  "team",
  "crew",
  "cast",
  "company",
  "outfit",
  "organization",
  "establishment",
  "institution",
  "agency",
  "bureau",
  "department",
  "division",
  "section",
  "unit",
  "branch",
  "wing",
  "arm",
  "leg",
  "hand",
  "foot",
  "head",
  "face",
  "eye",
  "ear",
  "nose",
  "mouth",
  "lip",
  "tongue",
  "tooth",
  "teeth",
  "jaw",
  "chin",
  "cheek",
  "forehead",
  "brow",
  "eyebrow",
  "eyelash",
  "eyelid",
  "pupil",
  "iris",
  "retina",
  "cornea",
  "lens",
  "optic nerve",
  "visual cortex",
  "brain",
  "cerebrum",
  "cerebellum",
  "brainstem",
  "spinal cord",
  "nervous system",
  "central nervous system",
  "peripheral nervous system",
  "autonomic nervous system",
  "sympathetic nervous system",
  "parasympathetic nervous system",
  "somatic nervous system",
  "enteric nervous system",
  "neural network",
  "artificial neural network",
  "deep learning",
  "machine learning",
  "artificial intelligence",
  "AI",
  "ML",
  "DL",
  "NN",
  "ANN",
  "CNN",
  "RNN",
  "LSTM",
  "GRU",
  "transformer",
  "attention mechanism",
  "self-attention",
  "multi-head attention",
  "encoder",
  "decoder",
  "encoder-decoder",
  "seq2seq",
  "sequence-to-sequence",
  "NLP",
  "natural language processing",
  "NLU",
  "natural language understanding",
  "NLG",
  "natural language generation",
  "NER",
  "named entity recognition",
  "POS",
  "part-of-speech",
  "tagging",
  "parsing",
  "tokenization",
  "stemming",
  "lemmatization",
  "word embedding",
  "word2vec",
  "GloVe",
  "fastText",
  "BERT",
  "GPT",
  "GPT-2",
  "GPT-3",
  "GPT-4",
  "T5",
  "BART",
  "RoBERTa",
  "XLNet",
  "ALBERT",
  "DistilBERT",
  "ELECTRA",
  "CLIP",
  "DALL-E",
  "Stable Diffusion",
  "Midjourney",
  "image generation",
  "text-to-image",
  "image-to-text",
  "image captioning",
  "image classification",
  "object detection",
  "semantic segmentation",
  "instance segmentation",
  "panoptic segmentation",
  "pose estimation",
  "face recognition",
  "facial recognition",
  "biometric recognition",
  "fingerprint recognition",
  "iris recognition",
  "voice recognition",
  "speech recognition",
  "speaker recognition",
  "speech synthesis",
  "text-to-speech",
  "speech-to-text",
  "voice conversion",
  "voice cloning",
  "voice morphing",
  "voice modulation",
  "voice modification",
  "voice transformation",
  "voice alteration",
  "voice changing",
  "voice disguising",
  "voice masking",
  "voice anonymization",
  "voice privacy",
  "voice security",
  "voice authentication",
  "voice verification",
  "voice identification",
  "voice biometrics",
  "voice analysis",
  "voice processing",
  "voice technology",
  "voice computing",
  "voice interface",
  "voice user interface",
  "VUI",
  "voice assistant",
  "virtual assistant",
  "digital assistant",
  "intelligent assistant",
  "personal assistant",
  "AI assistant",
  "chatbot",
  "conversational AI",
  "conversational agent",
  "dialogue system",
  "dialogue agent",
  "dialogue manager",
  "dialogue policy",
  "dialogue state tracking",
  "dialogue act classification",
  "dialogue generation",
  "dialogue modeling",
  "dialogue understanding",
  "dialogue processing",
  "dialogue analysis",
  "dialogue synthesis",
  "dialogue transformation",
  "dialogue translation",
  "dialogue summarization",
  "dialogue compression",
  "dialogue expansion",
  "dialogue augmentation",
  "dialogue enrichment",
  "dialogue enhancement",
  "dialogue improvement",
  "dialogue optimization",
  "dialogue personalization",
  "dialogue customization",
  "dialogue adaptation",
  "dialogue learning",
  "dialogue training",
  "dialogue fine-tuning",
  "dialogue pre-training",
  "dialogue post-processing",
  "dialogue pre-processing",
  "dialogue filtering",
  "dialogue cleaning",
  "dialogue normalization",
  "dialogue standardization",
  "dialogue formalization",
  "dialogue structuring",
  "dialogue organization",
  "dialogue arrangement",
  "dialogue ordering",
  "dialogue sequencing",
  "dialogue scheduling",
  "dialogue planning",
  "dialogue design",
  "dialogue architecture",
  "dialogue framework",
  "dialogue system architecture",
  "dialogue system framework",
  "dialogue system design",
  "dialogue system implementation",
  "dialogue system development",
  "dialogue system deployment",
  "dialogue system evaluation",
  "dialogue system assessment",
  "dialogue system testing",
  "dialogue system validation",
  "dialogue system verification",
  "dialogue system certification",
  "dialogue system accreditation",
  "dialogue system approval",
  "dialogue system authorization",
  "dialogue system authentication",
  "dialogue system security",
  "dialogue system privacy",
  "dialogue system safety",
  "dialogue system ethics",
  "dialogue system fairness",
  "dialogue system bias",
  "dialogue system transparency",
  "dialogue system explainability",
  "dialogue system interpretability",
  "dialogue system accountability",
  "dialogue system responsibility",
  "dialogue system liability",
  "dialogue system regulation",
  "dialogue system compliance",
  "dialogue system governance",
  "dialogue system management",
  "dialogue system administration",
  "dialogue system operation",
  "dialogue system maintenance",
  "dialogue system support",
  "dialogue system service",
  "dialogue system solution",
  "dialogue system product",
  "dialogue system platform",
  "dialogue system environment",
  "dialogue system ecosystem",
  "dialogue system landscape",
  "dialogue system market",
  "dialogue system industry",
  "dialogue system sector",
  "dialogue system field",
  "dialogue system domain",
  "dialogue system area",
  "dialogue system space",
  "dialogue system realm",
  "dialogue system sphere",
  "dialogue system world",
  "dialogue system universe",
  "dialogue system cosmos",
  "dialogue system existence",
  "dialogue system reality",
  "dialogue system virtuality",
  "dialogue system simulation",
  "dialogue system emulation",
  "dialogue system imitation",
  "dialogue system replication",
  "dialogue system duplication",
  "dialogue system copying",
  "dialogue system cloning",
  "dialogue system mirroring",
  "dialogue system reflection",
  "dialogue system projection",
  "dialogue system representation",
  "dialogue system depiction",
  "dialogue system portrayal",
  "dialogue system illustration",
  "dialogue system visualization",
  "dialogue system rendering",
  "dialogue system modeling",
  "dialogue system simulation",
  "dialogue system animation",
  "dialogue system generation",
  "dialogue system creation",
  "dialogue system production",
  "dialogue system fabrication",
  "dialogue system construction",
  "dialogue system building",
  "dialogue system development",
  "dialogue system implementation",
  "dialogue system deployment",
  "dialogue system installation",
  "dialogue system setup",
  "dialogue system configuration",
  "dialogue system customization",
  "dialogue system personalization",
  "dialogue system adaptation",
  "dialogue system adjustment",
  "dialogue system modification",
  "dialogue system alteration",
  "dialogue system transformation",
  "dialogue system conversion",
  "dialogue system translation",
  "dialogue system interpretation",
  "dialogue system understanding",
  "dialogue system comprehension",
  "dialogue system perception",
  "dialogue system recognition",
  "dialogue system identification",
  "dialogue system detection",
  "dialogue system discovery",
  "dialogue system exploration",
  "dialogue system investigation",
  "dialogue system examination",
  "dialogue system analysis",
  "dialogue system evaluation",
  "dialogue system assessment",
  "dialogue system judgment",
  "dialogue system appraisal",
  "dialogue system valuation",
  "dialogue system estimation",
  "dialogue system calculation",
  "dialogue system computation",
  "dialogue system processing",
  "dialogue system handling",
  "dialogue system management",
  "dialogue system administration",
  "dialogue system operation",
  "dialogue system execution",
  "dialogue system performance",
  "dialogue system functioning",
  "dialogue system behavior",
  "dialogue system conduct",
  "dialogue system action",
  "dialogue system activity",
  "dialogue system operation",
  "dialogue system process",
  "dialogue system procedure",
  "dialogue system protocol",
  "dialogue system method",
  "dialogue system methodology",
  "dialogue system technique",
  "dialogue system approach",
  "dialogue system strategy",
  "dialogue system tactic",
  "dialogue system plan",
  "dialogue system scheme",
  "dialogue system design",
  "dialogue system architecture",
  "dialogue system framework",
  "dialogue system structure",
  "dialogue system organization",
  "dialogue system arrangement",
  "dialogue system configuration",
  "dialogue system setup",
  "dialogue system layout",
  "dialogue system format",
  "dialogue system pattern",
  "dialogue system template",
  "dialogue system model",
  "dialogue system paradigm",
]

// Helper function to determine if a message is fashion-related
function isFashionQuery(message: string): boolean {
  const messageLower = message.toLowerCase()

  // Add watch-related keywords to ensure watches are recognized as fashion items
  const watchKeywords = [
    "watch",
    "smartwatch",
    "wristwatch",
    "timepiece",
    "chronograph",
    "analog watch",
    "digital watch",
  ]

  // Check if message contains any watch keywords
  const hasWatchKeyword = watchKeywords.some((keyword) => messageLower.includes(keyword))

  // If it has watch keywords, consider it a fashion query
  if (hasWatchKeyword) {
    return true
  }

  // Otherwise check against the general fashion keywords
  const hasFashionKeyword = fashionKeywords.some((keyword) => messageLower.includes(keyword))

  // Check if message contains non-fashion keywords
  const hasNonFashionKeyword = nonFashionKeywords.some((keyword) => messageLower.includes(keyword))

  // If message has fashion keywords and no non-fashion keywords, it's a fashion query
  return hasFashionKeyword && !hasNonFashionKeyword
}

// Helper function to determine if a message is about the KAATCHI project
function isProjectQuery(message: string): boolean {
  const messageLower = message.toLowerCase()

  // Check if the message contains "kaatchi" specifically
  if (messageLower.includes("kaatchi")) {
    return true
  }

  // Check for project-related questions
  const projectRelatedTerms = [
    "who made this",
    "who created this",
    "who built this",
    "who developed this",
    "who designed this",
    "tell me about this project",
    "tell me about this app",
    "tell me about this website",
    "what is this project",
    "what is this app",
    "what is this website",
    "how was this made",
    "how was this created",
    "how was this built",
    "how was this developed",
    "how was this designed",
    "who is behind this",
    "team behind this",
    "developers of this",
    "creators of this",
    "builders of this",
    "designers of this",
    "about this project",
    "about this app",
    "about this website",
    "about this platform",
    "about this system",
    "about this tool",
    "about this service",
    "about this product",
    "about this solution",
  ]

  return projectRelatedTerms.some((term) => messageLower.includes(term))
}

// Function to generate a response about the KAATCHI project
function generateProjectResponse(message: string): string {
  const messageLower = message.toLowerCase()

  // General project information
  if (
    messageLower.includes("what is") ||
    messageLower.includes("tell me about") ||
    messageLower.includes("about this")
  ) {
    return `KAATCHI is an AI-powered fashion search platform developed by Selva. The name "KAATCHI" means "vision" in Tamil, reflecting our mission to revolutionize how people discover and interact with fashion products online. The Vision-Language Model (VLM) that powers our search capabilities was built by Angeline and Prathish.

KAATCHI offers three powerful search methods:
1. Text Search: Find products by describing what you're looking for
2. Image Search: Upload an image to find similar products
3. Multimodal Search: Combine text and images for the most precise results

Our platform is built using Next.js, React, TypeScript, Python, and CLIP (Contrastive Language-Image Pre-training) technology to provide an intuitive and powerful fashion search experience.`
  }

  // Developer information
  if (
    messageLower.includes("who made") ||
    messageLower.includes("who created") ||
    messageLower.includes("who built") ||
    messageLower.includes("who developed") ||
    messageLower.includes("who designed") ||
    messageLower.includes("who is behind") ||
    messageLower.includes("team behind") ||
    messageLower.includes("developers") ||
    messageLower.includes("creators")
  ) {
    return `KAATCHI was developed by Selva, who created the main application architecture and user interface. The Vision-Language Model (VLM) that powers our advanced search capabilities was built by Angeline and Prathish. Together, they've created this fashion search platform that combines AI and computer vision to help users find exactly what they're looking for.`
  }

  // Technology information
  if (
    messageLower.includes("how was") ||
    messageLower.includes("technology") ||
    messageLower.includes("tech") ||
    messageLower.includes("built with") ||
    messageLower.includes("made with") ||
    messageLower.includes("developed with") ||
    messageLower.includes("created with")
  ) {
    return `KAATCHI was built using a combination of modern web and AI technologies. The frontend is developed with Next.js, React, and TypeScript, providing a responsive and intuitive user interface. The backend leverages Python for the AI components, particularly the CLIP (Contrastive Language-Image Pre-training) model that powers our vision-language capabilities. This allows us to understand both images and text queries to provide accurate fashion search results. The development team, led by Selva with Angeline and Prathish building the VLM components, created a system that can process multimodal inputs (text and images) to find the most relevant fashion items.`
  }

  // Default project response
  return `KAATCHI is an AI-powered fashion search platform developed by Selva, with the Vision-Language Model (VLM) built by Angeline and Prathish. Our name means "vision" in Tamil, reflecting our mission to revolutionize fashion discovery through advanced AI technology. Is there something specific about KAATCHI you'd like to know?`
}

export async function POST(request: NextRequest) {
  try {
    const { message, imageBase64 } = await request.json()

    // Check if the message is about the KAATCHI project
    if (isProjectQuery(message)) {
      const projectResponse = generateProjectResponse(message)
      return NextResponse.json({
        response: projectResponse,
        source: "openai",
      })
    }

    // Check if the message is fashion-related or has an image
    if (isFashionQuery(message) || imageBase64) {
      // Determine search type based on inputs
      let searchType: "text" | "image" | "multimodal" = "text"
      if (message && imageBase64) {
        searchType = "multimodal"
      } else if (imageBase64 && !message) {
        searchType = "image"
      }

      // Forward to the VLM endpoint
      const vlmResponse = await fetch(new URL("/api/chat/vlm", request.url), {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          message,
          imageBase64,
          searchType,
        }),
      })

      if (!vlmResponse.ok) {
        throw new Error("VLM API request failed")
      }

      return NextResponse.json(await vlmResponse.json())
    } else {
      // For general conversation, use OpenAI
      const chatCompletion = await openai.chat.completions.create({
        model: "gpt-3.5-turbo",
        messages: [
          {
            role: "system",
            content:
              "You are KAATCHI, a fashion assistant powered by a vision-language model. Your name means 'vision' in Tamil. You were developed by Selva, with the Vision-Language Model (VLM) built by Angeline and Prathish. You specialize in fashion search and recommendations. Keep your responses brief, friendly, and helpful. If users ask about fashion, encourage them to describe specific clothing items or upload images for better recommendations. For non-fashion queries, provide brief, helpful responses but suggest fashion-related topics when appropriate. If users ask about Bitcoin or cryptocurrencies, provide accurate information about them without trying to relate them to fashion products."
          },
          { role: "user", content: message },
        ],
        max_tokens: 300,
      })

      return NextResponse.json({
        response: chatCompletion.choices[0].message.content,
        source: "openai",
      })
    }
  } catch (error) {
    console.error("Chat error:", error)
    return NextResponse.json({ error: "Failed to process chat request" }, { status: 500 })
  }
}

